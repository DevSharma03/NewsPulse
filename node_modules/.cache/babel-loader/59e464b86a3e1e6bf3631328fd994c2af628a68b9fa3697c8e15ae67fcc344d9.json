{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROGRAMMING\\\\Web Development\\\\React.js\\\\project-2\\\\src\\\\Components\\\\News.js\";\nimport React, { Component } from \"react\";\nimport Newsitems from \"./Newsitems\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class News extends Component {\n  // Initialize the state in the constructor\n  constructor() {\n    super();\n    this.state = {\n      articles: [],\n      // Holds the news articles fetched from the API\n      loading: false,\n      // Loading state to manage the spinner or indicator\n      page: 1,\n      // Current page for pagination\n      totalArticles: 0 // Total number of articles available\n    };\n    this.observer = null; // Observer for infinite scrolling\n  }\n\n  /**\r\n   * Function to fetch and update news articles.\r\n   * Accepts an optional page number as a parameter.\r\n   */\n  async updateNews() {\n    const {\n      country,\n      category,\n      pageSize\n    } = this.props;\n    const {\n      page\n    } = this.state;\n\n    // Construct the API URL with query parameters\n    let url = `https://newsapi.org/v2/top-headlines?country=${country}&category=${category}&apiKey=062cfa709b6d45a68425747443409336&page=${page}&pageSize=${pageSize}`;\n\n    // Set the loading state to true before making the API call\n    this.setState({\n      loading: true\n    });\n    try {\n      let response = await fetch(url);\n      let parsedData = await response.json(); // Parse the JSON response\n\n      this.setState(prevState => ({\n        articles: [...prevState.articles, ...parsedData.articles],\n        // Append new articles\n        totalArticles: parsedData.totalResults,\n        loading: false // Stop loading once data is fetched\n      }));\n    } catch (error) {\n      console.error(\"Error fetching news:\", error);\n      this.setState({\n        loading: false\n      }); // Stop loading on error\n    }\n  }\n\n  // Lifecycle method to fetch news after the component mounts\n  componentDidMount() {\n    this.updateNews();\n\n    // Set up the IntersectionObserver for infinite scrolling\n    this.observer = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && !this.state.loading) {\n        this.setState(prevState => ({\n          page: prevState.page + 1\n        }), () => this.updateNews());\n      }\n    }, {\n      root: null,\n      // Observe the entire viewport\n      threshold: 1.0 // Trigger when the target is fully visible\n    });\n\n    // Attach the observer to the \"scroll-anchor\" div\n    const anchor = document.querySelector(\"#scroll-anchor\");\n    if (anchor) {\n      this.observer.observe(anchor);\n    }\n  }\n  componentWillUnmount() {\n    // Disconnect the observer when the component unmounts to prevent memory leaks\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"Top News Headlines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), this.state.loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: this.state.articles.map((element, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: /*#__PURE__*/_jsxDEV(Newsitems, {\n            title: element.title ? element.title.slice(0, 40) : \" \",\n            description: element.description ? element.description.slice(0, 80) : \" \",\n            imageUrl: element.urlToImage,\n            newsUrl: element.url,\n            author: element.author,\n            date: element.publishedAt,\n            source: element.source.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)\n        }, `${element.url}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"scroll-anchor\",\n        style: {\n          height: \"1px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n}\n// Default props to define the default values for the component\nNews.defaultProps = {\n  country: \"us\",\n  // Default country is \"us\"\n  pageSize: 9,\n  // Default number of articles per page\n  category: \"general\" // Default category is \"general\"\n};\n// Prop validation for the component\nNews.propTypes = {\n  country: PropTypes.string,\n  pageSize: PropTypes.number,\n  category: PropTypes.string\n};","map":{"version":3,"names":["React","Component","Newsitems","PropTypes","jsxDEV","_jsxDEV","News","constructor","state","articles","loading","page","totalArticles","observer","updateNews","country","category","pageSize","props","url","setState","response","fetch","parsedData","json","prevState","totalResults","error","console","componentDidMount","IntersectionObserver","entries","isIntersecting","root","threshold","anchor","document","querySelector","observe","componentWillUnmount","disconnect","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","element","index","title","slice","description","imageUrl","urlToImage","newsUrl","author","date","publishedAt","source","name","id","style","height","defaultProps","propTypes","string","number"],"sources":["E:/PROGRAMMING/Web Development/React.js/project-2/src/Components/News.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport Newsitems from \"./Newsitems\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class News extends Component {\r\n  // Default props to define the default values for the component\r\n  static defaultProps = {\r\n    country: \"us\", // Default country is \"us\"\r\n    pageSize: 9, // Default number of articles per page\r\n    category: \"general\", // Default category is \"general\"\r\n  };\r\n\r\n  // Prop validation for the component\r\n  static propTypes = {\r\n    country: PropTypes.string,\r\n    pageSize: PropTypes.number,\r\n    category: PropTypes.string,\r\n  };\r\n\r\n  // Initialize the state in the constructor\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      articles: [], // Holds the news articles fetched from the API\r\n      loading: false, // Loading state to manage the spinner or indicator\r\n      page: 1, // Current page for pagination\r\n      totalArticles: 0, // Total number of articles available\r\n    };\r\n    this.observer = null; // Observer for infinite scrolling\r\n  }\r\n\r\n  /**\r\n   * Function to fetch and update news articles.\r\n   * Accepts an optional page number as a parameter.\r\n   */\r\n  async updateNews() {\r\n    const { country, category, pageSize } = this.props;\r\n    const { page } = this.state;\r\n\r\n    // Construct the API URL with query parameters\r\n    let url = `https://newsapi.org/v2/top-headlines?country=${country}&category=${category}&apiKey=062cfa709b6d45a68425747443409336&page=${page}&pageSize=${pageSize}`;\r\n\r\n    // Set the loading state to true before making the API call\r\n    this.setState({ loading: true });\r\n\r\n    try {\r\n      let response = await fetch(url);\r\n      let parsedData = await response.json(); // Parse the JSON response\r\n\r\n      this.setState((prevState) => ({\r\n        articles: [...prevState.articles, ...parsedData.articles], // Append new articles\r\n        totalArticles: parsedData.totalResults,\r\n        loading: false, // Stop loading once data is fetched\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"Error fetching news:\", error);\r\n      this.setState({ loading: false }); // Stop loading on error\r\n    }\r\n  }\r\n\r\n  // Lifecycle method to fetch news after the component mounts\r\n  componentDidMount() {\r\n    this.updateNews();\r\n\r\n    // Set up the IntersectionObserver for infinite scrolling\r\n    this.observer = new IntersectionObserver(\r\n      (entries) => {\r\n        if (entries[0].isIntersecting && !this.state.loading) {\r\n          this.setState(\r\n            (prevState) => ({ page: prevState.page + 1 }),\r\n            () => this.updateNews()\r\n          );\r\n        }\r\n      },\r\n      {\r\n        root: null, // Observe the entire viewport\r\n        threshold: 1.0, // Trigger when the target is fully visible\r\n      }\r\n    );\r\n\r\n    // Attach the observer to the \"scroll-anchor\" div\r\n    const anchor = document.querySelector(\"#scroll-anchor\");\r\n    if (anchor) {\r\n      this.observer.observe(anchor);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Disconnect the observer when the component unmounts to prevent memory leaks\r\n    if (this.observer) {\r\n      this.observer.disconnect();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container my-3\">\r\n        <h1 className=\"text-center\">Top News Headlines</h1>\r\n\r\n        {/* Display a loading spinner or text when data is being fetched */}\r\n        {this.state.loading && <p>Loading...</p>}\r\n\r\n        {/* Render the news articles */}\r\n        <div className=\"row\">\r\n          {this.state.articles.map((element, index) => (\r\n            <div className=\"col-md-4\" key={`${element.url}-${index}`}>\r\n              <Newsitems\r\n                title={element.title ? element.title.slice(0, 40) : \" \"}\r\n                description={\r\n                  element.description\r\n                    ? element.description.slice(0, 80)\r\n                    : \" \"\r\n                }\r\n                imageUrl={element.urlToImage}\r\n                newsUrl={element.url}\r\n                author={element.author}\r\n                date={element.publishedAt}\r\n                source={element.source.name}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Anchor for infinite scrolling */}\r\n        <div id=\"scroll-anchor\" style={{ height: \"1px\" }}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}